name: Quality Gates

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  quality_check:
    name: Quality Gates
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: '1.18.4'
        otp-version: '27.2.1'

    - name: Restore dependencies cache
      uses: actions/cache@v4
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-

    - name: Install dependencies
      run: mix deps.get

    - name: Check code formatting
      run: mix format --check-formatted

    - name: Compile (warnings as errors)
      run: mix compile --warnings-as-errors

    - name: Run tests with coverage
      run: mix test --cover
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost/rachel_test

    - name: Security scan
      run: mix sobelow --exit

    - name: Static analysis
      run: mix credo --strict

    - name: Check for LiveView DOM issues
      run: |
        if mix test 2>&1 | grep -q "Duplicate id found"; then
          echo "❌ Duplicate LiveView IDs detected!"
          echo "This causes DOM patching bugs in production."
          exit 1
        fi

    - name: Property-based tests
      run: mix test test/property_tests/ --seed 42
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost/rachel_test

    - name: Coverage threshold check
      run: |
        COVERAGE=$(mix test --cover 2>&1 | grep -o '\[TOTAL\]\s*[0-9.]*%' | grep -o '[0-9.]*')
        echo "Coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < 70" | bc -l) )); then
          echo "❌ Coverage ${COVERAGE}% is below 70% threshold"
          exit 1
        fi

  performance_check:
    name: Performance Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check for performance issues
      run: |
        # Check for N+1 query patterns
        if grep -r "Enum.map.*Repo\." lib/; then
          echo "⚠️ Potential N+1 queries detected"
          grep -r "Enum.map.*Repo\." lib/
        fi
        
        # Check for large functions
        if find lib/ -name "*.ex" -exec awk '/def / {start=NR} /^end$/ && start {if (NR-start > 50) print FILENAME":"start":"NR-start" lines"; start=0}' {} \; | grep .; then
          echo "⚠️ Large functions detected (>50 lines)"
        fi

  deployment_readiness:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [quality_check, performance_check]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check deployment readiness
      run: |
        echo "✅ All quality gates passed"
        echo "✅ Performance checks passed"  
        echo "🚀 Ready for deployment"