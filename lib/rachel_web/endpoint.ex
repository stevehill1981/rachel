defmodule RachelWeb.Endpoint do
  use Phoenix.Endpoint, otp_app: :rachel

  # The session will be stored in the cookie and signed,
  # this means its contents can be read but not tampered with.
  # Set :encryption_salt if you would also like to encrypt it.
  @session_options [
    store: :cookie,
    key: "_rachel_key",
    signing_salt: "No/GUMQ1",
    # Encrypt session data
    encryption_salt: "session_encryption_salt",
    # 24 hours session expiry
    max_age: 24 * 60 * 60,
    same_site: "Lax",
    # Only send over HTTPS in production
    secure: Mix.env() == :prod,
    # Prevent JavaScript access to session cookie
    http_only: true,
    # Additional protection against CSRF
    extra: "SameSite=Lax"
  ]

  socket "/live", Phoenix.LiveView.Socket,
    websocket: [connect_info: [session: @session_options]],
    longpoll: [connect_info: [session: @session_options]]

  # Serve at "/" the static files from "priv/static" directory.
  #
  # When code reloading is disabled (e.g., in production),
  # the `gzip` option is enabled to serve compressed
  # static files generated by running `phx.digest`.
  plug Plug.Static,
    at: "/",
    from: :rachel,
    gzip: not code_reloading?,
    only: RachelWeb.static_paths()

  # Code reloading can be explicitly enabled under the
  # :code_reloader configuration of your endpoint.
  if code_reloading? do
    socket "/phoenix/live_reload/socket", Phoenix.LiveReloader.Socket
    plug Phoenix.LiveReloader
    plug Phoenix.CodeReloader
  end

  plug Phoenix.LiveDashboard.RequestLogger,
    param_key: "request_logger",
    cookie_key: "request_logger"

  plug Plug.RequestId
  plug Plug.Telemetry, event_prefix: [:phoenix, :endpoint]

  plug Plug.Parsers,
    parsers: [:urlencoded, :multipart, :json],
    pass: ["*/*"],
    json_decoder: Phoenix.json_library()

  plug Plug.MethodOverride
  plug Plug.Head
  plug Plug.Session, @session_options

  # Security headers
  plug :put_security_headers

  # Sentry error boundary to capture all errors
  plug Sentry.PlugContext

  plug RachelWeb.Router

  # Security headers function
  defp put_security_headers(conn, _opts) do
    conn
    |> Plug.Conn.put_resp_header("content-security-policy", csp_header())
    |> Plug.Conn.put_resp_header("x-content-type-options", "nosniff")
    |> Plug.Conn.put_resp_header("x-frame-options", "DENY")
    |> Plug.Conn.put_resp_header("x-xss-protection", "1; mode=block")
    |> Plug.Conn.put_resp_header("referrer-policy", "strict-origin-when-cross-origin")
  end

  defp csp_header do
    # Content Security Policy for Phoenix LiveView applications
    [
      "default-src 'self'",
      "script-src 'self' 'unsafe-inline' 'unsafe-eval'", # Needed for LiveView and theme switching
      "style-src 'self' 'unsafe-inline'", # Needed for dynamic theme CSS custom properties
      "img-src 'self' data:",
      "font-src 'self'",
      "connect-src 'self' ws: wss:", # WebSocket connections for LiveView
      "frame-ancestors 'none'",
      "base-uri 'self'",
      "form-action 'self'"
    ]
    |> Enum.join("; ")
  end
end
